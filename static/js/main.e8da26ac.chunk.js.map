{"version":3,"sources":["trivia.png","actions/index.js","pages/Login.js","components/Question.js","components/Header.js","pages/Game.js","pages/Settings.js","components/Results.js","pages/Feedback.js","pages/Ranking.js","components/MainHeader.js","App.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","getName","name","type","payload","getEmail","email","getScore","score","getAssertion","anwser","Login","state","nome","btnDisabled","onHandle","target","value","setState","activateButton","length","submitForm","e","preventDefault","funcFetch","a","fetch","response","json","data","props","dispatch","history","localStorage","setItem","token","push","console","error","this","className","src","logo","alt","onSubmit","onChange","data-testid","placeholder","disabled","to","Component","connect","Question","category","correctAnswer","answers","question","answerF","answered","replace","map","answer","index","key","onClick","undefined","Header","emailString","md5","toString","player","gravatarEmail","Game","questions","difficulty","timer","next","showTimer","counter","timeLeft","setInterval","prev","getQuestions","getItem","url","getTrivia","results","response_code","correct_answer","incorrect_answers","concat","sort","Math","random","dataset","testid","setScore","clearInterval","timesUp","nextQuestion","assertions","diff","assertion","Settings","Results","message","Feedback","firstPlay","ranking","JSON","stringify","otherPlay","players","parse","newPlayer","newList","reset","Ranking","first","clearRanking","removeItem","b","MainHeader","link","href","App","path","exact","component","INITIAL_STATE","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","window","Cypress","ReactDOM","render","basename","document","getElementById"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,oC,oPCM9BC,EAAU,SAACC,GAAD,MAAW,CAChCC,KAPsB,WAQtBC,QAASF,IAGEG,EAAW,SAACC,GAAD,MAAY,CAClCH,KAXuB,YAYvBC,QAASE,IAGEC,EAAW,SAACC,GAAD,MAAY,CAClCL,KAfuB,YAgBvBC,QAASI,IAGEC,EAAe,SAACC,GAAD,MAAa,CACvCP,KAnB2B,gBAoB3BC,QAASM,I,iBChBLC,E,4MACJC,MAAQ,CACNC,KAAM,GACNP,MAAO,GACPQ,aAAa,G,EAGfC,SAAW,YAAiB,IAAdC,EAAa,EAAbA,OACJC,EAAUD,EAAVC,MACAf,EAASc,EAATd,KAER,EAAKgB,SAAL,eAAiBhB,EAAOe,IAAS,WAAQ,EAAKE,qB,EAGhDA,eAAiB,WACf,MAAwB,EAAKP,MAArBC,EAAR,EAAQA,KAAMP,EAAd,EAAcA,MACVO,EAAKO,OAAS,GAAKd,EAAMc,OAAS,EACpC,EAAKF,SAAS,CAAEJ,aAAa,IAE7B,EAAKI,SAAS,CAAEJ,aAAa,K,EAIjCO,WAAa,SAACC,GACZA,EAAEC,iBACF,EAAKC,a,EAGPA,U,sBAAY,0CAAAC,EAAA,+DACc,EAAKb,MAArBC,EADE,EACFA,KAAMP,EADJ,EACIA,MACG,oDAFP,kBAIeoB,MAFR,qDAFP,cAIFC,EAJE,gBAKWA,EAASC,OALpB,OAKFC,EALE,SAMsB,EAAKC,MAA3BC,EANA,EAMAA,SAAUC,EANV,EAMUA,QAClBD,EAAS9B,EAAQY,IACjBkB,EAAS1B,EAASC,IAClB2B,aAAaC,QAAQ,QAASL,EAAKM,OACnCH,EAAQI,KAAK,SAVL,kDAYRC,QAAQC,MAAR,MAZQ,0D,4CAgBZ,WACE,MAAqCC,KAAK3B,MAAlCC,EAAR,EAAQA,KAAMP,EAAd,EAAcA,MAAOQ,EAArB,EAAqBA,YACrB,OACE,yBAAK0B,UAAU,SACb,4BAAQA,UAAU,gBAChB,yBAAKC,IAAMC,IAAOF,UAAU,aAAaG,IAAI,SAC7C,0CAEF,0BAAMC,SAAWL,KAAKlB,YACpB,2BACEnB,KAAK,OACLe,MAAQJ,EACRgC,SAAWN,KAAKxB,SAChB+B,cAAY,oBACZ3C,KAAK,OACL4C,YAAY,SAEd,6BACA,2BACE7C,KAAK,QACLe,MAAQX,EACRuC,SAAWN,KAAKxB,SAChB+B,cAAY,uBACZ3C,KAAK,OACL4C,YAAY,WAEd,6BACA,6BACA,4BACEP,UAAU,eACVrC,KAAK,SACL2C,cAAY,WACZE,SAAWlC,GAJb,SASF,6BACA,kBAAC,IAAD,CAAMmC,GAAG,WAAWH,cAAY,gBAAhC,gB,GAlFYI,aA+FLC,gBAAUxC,GCnBVyC,E,4JA/Eb,WACE,MAA0Eb,KAAKT,MAAvEuB,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,cAAeC,EAAjC,EAAiCA,QAASC,EAA1C,EAA0CA,SAAUC,EAApD,EAAoDA,QAASC,EAA7D,EAA6DA,SAC7D,OACE,0BAAMlB,UAAU,YACd,wBAAIM,cAAY,qBACbO,EACEM,QAAQ,UAAW,KACnBA,QAAQ,UAAW,KACnBA,QAAQ,SAAU,KAClBA,QAAQ,QAAS,QACjBA,QAAQ,WAAY,QACpBA,QAAQ,UAAW,QACnBA,QAAQ,YAAa,SAE1B,wBAAIb,cAAY,iBACbU,EACEG,QAAQ,UAAW,KACnBA,QAAQ,UAAW,KACnBA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,QACjBA,QAAQ,WAAY,QACpBA,QAAQ,UAAW,QACnBA,QAAQ,YAAa,SAE1B,yBAAKb,cAAY,iBAAiBN,UAAU,oBACzCe,EAAQK,KAAI,SAACC,EAAQC,GAAT,OACXD,IAAWP,EACT,4BACES,IAAMF,EACN1D,KAAK,SACL2C,cAAA,uBAA8BgB,GAC9BE,QAAUP,EACVjB,UAAYkB,EAAW,sBAAmBO,EAC1CjB,SAAWU,GAEVG,EACEF,QAAQ,UAAW,KACnBA,QAAQ,UAAW,KACnBA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,QACjBA,QAAQ,WAAY,QACpBA,QAAQ,UAAW,QACnBA,QAAQ,YAAa,SAG1B,4BACEI,IAAMF,EACN1D,KAAK,SACL2C,cAAY,iBACZkB,QAAUP,EACVjB,UAAYkB,EAAW,sBAAmBO,EAC1CjB,SAAWU,GAEVG,EACEF,QAAQ,UAAW,KACnBA,QAAQ,UAAW,KACnBA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,QACjBA,QAAQ,WAAY,QACpBA,QAAQ,UAAW,QACnBA,QAAQ,YAAa,kB,GA7DjBT,a,iBCEjBgB,E,4MACJtD,MAAQ,CACNuD,YAAa,I,uDAGf,WACE,IAAQ7D,EAAUiC,KAAKT,MAAfxB,MACF6D,EAAcC,IAAI9D,GAAO+D,WAC/B9B,KAAKrB,SAAS,CAAEiD,kB,oBAGlB,WACE,IAAQA,EAAgB5B,KAAK3B,MAArBuD,YACR,EAAwB5B,KAAKT,MAArB5B,EAAR,EAAQA,KAAMM,EAAd,EAAcA,MAEd,OACE,4BAAQgC,UAAU,eAChB,yBACEC,IAAG,UAJQ,oCAIR,OAAiB0B,GACpBxB,IAAI,iBACJG,cAAY,2BAEd,0BAAMA,cAAY,sBAAsB5C,GACxC,yCACA,0BAAM4C,cAAY,gBAAgBtC,Q,GAxBrB0C,aA2CNC,eAbS,SAAC,GAAD,IAAGmB,EAAH,EAAGA,OAAH,MAAiB,CACvCpE,KAAMoE,EAAOpE,KAEbM,MAAO8D,EAAO9D,MACdF,MAAOgE,EAAOC,iBASDpB,CAAyBe,GCzClCM,E,4MACJ5D,MAAQ,CACN6D,UAAW,GACXpB,SAAU,GACVC,cAAe,GACfoB,WAAY,GACZnB,QAAS,GACTC,SAAU,GACVM,MAAO,EACPJ,UAAU,EACViB,MAAO,GACPC,MAAM,EACNC,WAAW,G,EAYbC,QAAU,WAGR,EAAKC,SAAWC,aAAY,WAC1B,EAAK9D,UAAS,SAAC+D,GAAD,MAAW,CAAEN,MAAOM,EAAKN,MAAQ,QAH5B,M,EAOvBO,a,sBAAe,kCAAAzD,EAAA,6DACPU,EAAQF,aAAakD,QAAQ,SACd,EACfC,EAHO,6CAEQ,EAFR,kBAG2DjD,GAH3D,SAIUT,MAAM0D,GAJhB,cAIPzD,EAJO,gBAKWA,EAASC,OALpB,OAKP6C,EALO,OAMb,EAAKY,UAAUZ,GANF,4C,EASfY,UAAY,YAA2C,IAAxCC,EAAuC,EAAvCA,QAAwB3D,EAAe,EAA9B4D,cACdvD,EAAY,EAAKF,MAAjBE,QAEW,IACfL,GACFM,aAAaC,QAAQ,QAAS,IAC9BF,EAAQI,KAAK,OAEb,EAAKlB,SAAS,CACZuD,UAAWa,EACXjC,SAAUiC,EAAQ,GAAGjC,SACrBC,cAAegC,EAAQ,GAAGE,eAC1Bd,WAAYY,EAAQ,GAAGZ,WACvBnB,QAAS+B,EAAQ,GAAGG,kBACjBC,OAAOJ,EAAQ,GAAGE,gBAClBG,MAAK,kBAAMC,KAAKC,SAbX,MAcRrC,SAAU8B,EAAQ,GAAG9B,SACrBM,MAAO,EACPe,WAAW,IAEb,EAAKC,Y,EAITjB,OAAS,YAES,mBAFO,EAAb7C,OACa8E,QAAQC,QACG,EAAKC,WAEvCC,cAAc,EAAKlB,UACnB,EAAK7D,SAAS,CACZyD,MAAO,GACPjB,UAAU,EACVkB,MAAM,EACNC,WAAW,K,EAIfqB,QAAU,WACRD,cAAc,EAAKlB,UACnB,EAAK7D,SAAS,CACZyD,MAAO,GACPjB,UAAU,EACVkB,MAAM,EACNC,WAAW,K,EAIfsB,aAAe,WACb,MAA6B,EAAKvF,MAA1B6D,EAAR,EAAQA,UAAWX,EAAnB,EAAmBA,MACX9B,EAAY,EAAKF,MAAjBE,QAGF4C,EAAOd,EAAQ,EADA,IAEjBA,EAAwB9B,EAAQI,KAAK,cAEvC,EAAKlB,SAAS,CACZmC,SAAUoB,EAAUG,GAAMvB,SAC1BC,cAAemB,EAAUG,GAAMY,eAC/BjC,QAASkB,EAAUG,GAAMa,kBAAkBC,OAAOjB,EAAUG,GAAMY,gBAC/DG,MAAK,kBAAMC,KAAKC,SATX,MAURrC,SAAUiB,EAAUG,GAAMpB,SAC1BM,MAAOc,EACPlB,UAAU,EACVkB,MAAM,EACNC,WAAW,IAEb,EAAKC,Y,EAITkB,SAAW,WACT,MAA8B,EAAKpF,MAA3B+D,EAAR,EAAQA,MAAOD,EAAf,EAAeA,WACf,EAAwC,EAAK5C,MAArCC,EAAR,EAAQA,SAAUvB,EAAlB,EAAkBA,MAAO4F,EAAzB,EAAyBA,WAKrBC,EAAO,EACX,OAAQ3B,GACR,IAAK,OACH2B,EAPW,EAQX,MACF,IAAK,SACHA,EATa,EAUb,MACF,IAAK,OACHA,EAXW,EAYX,MACF,QACEA,EAAO,EAET,IACMC,EAAYF,EAAa,EAC/BrE,EAASxB,EAFKC,GAfD,GAeiBmE,EAAQ0B,KAGtCtE,EAAStB,EAAa6F,K,uDAxHxB,WACE/D,KAAK2C,iB,gCAGP,WAEgB,IADI3C,KAAK3B,MAAf+D,OACSpC,KAAK2D,Y,oBAqHxB,WACE,MASgB3D,KAAK3B,MARnByC,EADF,EACEA,SACAC,EAFF,EAEEA,cACAC,EAHF,EAGEA,QACAC,EAJF,EAIEA,SACAE,EALF,EAKEA,SACAkB,EANF,EAMEA,KACAd,EAPF,EAOEA,MACAa,EARF,EAQEA,MACAE,EATF,EASEA,UAGF,OACE,oCACE,kBAAC,EAAD,MACA,yBAAKrC,UAAU,aACb,kBAAC,EAAD,CACEa,SAAWA,EACXC,cAAgBA,EAChBC,QAAUA,EACVC,SAAWA,EACX2C,aAAe5D,KAAK4D,aACpB1C,QAAUlB,KAAKsB,OACfH,SAAWA,IAGXkB,GACE,4BACEpC,UAAU,oBACVrC,KAAK,SACL2C,cAAY,WACZkB,QAAUzB,KAAK4D,cApBN,IAsBRrC,EAAyB,WAAa,QAK3Ce,GACE,yBAAKrC,UAAU,mBACb,uBAAGA,UAAU,SAAb,mBACA,uBAAGA,UAAU,SAASmC,U,GApLnBzB,aA8MJC,eAhBS,SAAC,GAAD,IAAGmB,EAAH,EAAGA,OAAH,MAAiB,CACvCpE,KAAMoE,EAAOpE,KACbkG,WAAY9B,EAAO8B,WACnB5F,MAAO8D,EAAO9D,MACdF,MAAOgE,EAAOC,iBAYDpB,CAAyBqB,GC3MzB+B,E,4JAPb,WACE,OACE,wBAAIzD,cAAY,kBAAhB,gB,GAHiBI,a,QCGjBsD,E,4MACJC,QAAU,WAGR,OAFuB,EAAK3E,MAApBsE,WACK,EACiB,qBACvB,c,4CAGT,WACE,MAAuC7D,KAAKT,MAApCsE,EAAR,EAAQA,WAAY5F,EAApB,EAAoBA,MAAOwB,EAA3B,EAA2BA,QAC3B,OACE,yBAAKQ,UAAU,WACb,uBAAGM,cAAY,iBAAiBP,KAAKkE,WACrC,yCACA,0BAAM3D,cAAY,wBAAwBtC,GAC1C,6BACA,8CACA,0BAAMsC,cAAY,2BAA2BsD,GAC7C,6BACA,kBAAC,IAAD,CACE5D,UAAU,kBACVS,GAAG,WACHH,cAAY,eAHd,WAOA,6BACA,4BACEN,UAAU,0BACVwB,QAAU,kBAAMhC,EAAQI,KAAK,MAC7BjC,KAAK,SACL2C,cAAY,kBAJd,mB,GA3BcI,aAqDPC,eAbS,SAAC,GAAD,IAAGmB,EAAH,EAAGA,OAAH,MAAiB,CACvC8B,WAAY9B,EAAO8B,WACnB5F,MAAO8D,EAAO9D,SAWD2C,CAAyBqD,GCnDlCE,E,4MAWJC,UAAY,WACV,MAAwB,EAAK7E,MACvB8E,EAAU,CAAC,CACf1G,KAFF,EAAQA,KAGNM,MAHF,EAAcA,QAKdyB,aAAaC,QAAQ,UAAW2E,KAAKC,UAAUF,K,EAGjDG,UAAY,WACV,MAAwB,EAAKjF,MAArB5B,EAAR,EAAQA,KAAMM,EAAd,EAAcA,MACRwG,EAAUH,KAAKI,MAAMhF,aAAakD,QAAQ,YAC1C+B,EAAY,CAChBhH,OACAM,SAEI2G,EAAO,sBAAOH,GAAP,CAAgBE,IAC7BjF,aAAaC,QAAQ,UAAW2E,KAAKC,UAAUK,K,uDA3BjD,WACOlF,aAAakD,QAAQ,WACrB5C,KAAKwE,YAD4BxE,KAAKoE,c,kCAI7C,WACE,IPYqBS,GOXrBrF,EADqBQ,KAAKT,MAAlBC,UPYwB,CAClC5B,KAvBuB,YAwBvBC,QAASgH,M,oBOUT,WACE,IAAQpF,EAAYO,KAAKT,MAAjBE,QACR,OACE,yBAAKc,cAAY,iBACf,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASd,QAAUA,S,GApCJkB,aAyDRC,eAfS,SAAC,GAAD,IAAGmB,EAAH,EAAGA,OAAH,MAAiB,CACvCpE,KAAMoE,EAAOpE,KACbM,MAAO8D,EAAO9D,SAaD2C,CAAyBuD,GCSzBW,E,4MArEbzG,MAAQ,CACNgG,QAAS,GACTU,OAAO,G,EAcTC,aAAe,WACbtF,aAAauF,WAAW,WACxB,EAAKtG,SAAS,CAAEoG,OAAO,K,uDAbzB,WACE,GAAIrF,aAAakD,QAAQ,WAAY,CACnC,IACMyB,EADOC,KAAKI,MAAMhF,aAAakD,QAAQ,YACxBQ,MAAK,SAAClE,EAAGgG,GAAJ,OAAUA,EAAEjH,MAAQiB,EAAEjB,SAChD+B,KAAKrB,SAAS,CACZ0F,UACAU,OAAO,SAEJ/E,KAAKrB,SAAS,CAAEoG,OAAO,M,oBAQhC,WACE,MAA2B/E,KAAK3B,MAAxBgG,EAAR,EAAQA,QAASU,EAAjB,EAAiBA,MACTtF,EAAYO,KAAKT,MAAjBE,QAER,OACE,yBAAKQ,UAAU,WACb,uBAAGM,cAAY,iBAAf,YAEGwE,GACC,yBAAK9E,UAAU,oBAEXoE,EAAQhD,KAAI,SAACU,EAAQR,GAAT,OACV,yBAAKtB,UAAU,SAASuB,IAAMD,GAC5B,0BAAMhB,cAAA,sBAA6BgB,IAAWQ,EAAOpE,MACrD,0BAAM4C,cAAA,uBAA8BgB,IAAWQ,EAAO9D,YAOlE,6BACA,4BACEgC,UAAU,0BACVwB,QAAU,kBAAMhC,EAAQI,KAAK,MAC7BjC,KAAK,SACL2C,cAAY,eAJd,cAQA,4BACE3C,KAAK,SACLqC,UAAU,6BACVwB,QAAUzB,KAAKgF,cAHjB,sB,GApDcrE,aCYPwE,MAbf,WACE,IAAMC,EAAO,uBAAGC,KAAK,mCAAR,oBACb,OACE,yBAAKpF,UAAU,eACb,+CAEG,IACAmF,KCCM,SAASE,IACtB,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAYrH,IAClC,kBAAC,IAAD,CAAOmH,KAAK,QAAQC,OAAK,EAACC,UAAYxD,IACtC,kBAAC,IAAD,CAAOsD,KAAK,YAAYC,OAAK,EAACC,UAAYzB,IAC1C,kBAAC,IAAD,CAAOuB,KAAK,YAAYC,OAAK,EAACC,UAAYtB,IAC1C,kBAAC,IAAD,CAAOoB,KAAK,WAAWC,OAAK,EAACC,UAAYX,M,4BChB3CY,EAAgB,CACpB/H,KAAM,UACNkG,WAAY,EACZ5F,MAAO,EACP+D,cAAe,qBA2BF2D,EAFKC,0BAAgB,CAAE7D,OAtBvB,WAAoC,IAAnC1D,EAAkC,uDAA1BqH,EAAeG,EAAW,uCAChD,OAAQA,EAAOjI,MACf,IXZsB,WWapB,OAAO,2BAAKS,GAAZ,IAAmBV,KAAMkI,EAAOhI,UAElC,IXduB,YWerB,OAAO,2BAAKQ,GAAZ,IAAmB2D,cAAe6D,EAAOhI,UAE3C,IXhBuB,YWiBrB,OAAO,2BAAKQ,GAAZ,IAAmBJ,MAAO4H,EAAOhI,UAEnC,IXlB2B,gBWmBzB,OAAO,2BAAKQ,GAAZ,IAAmBwF,WAAYgC,EAAOhI,UAExC,IXpBuB,YWqBrB,OAAO6H,EAET,QACE,OAAOrH,MCxBLyH,EAAQC,6BAAYJ,EAAaK,iCACnCC,OAAOC,UACTD,OAAOH,MAAQA,GAGFA,QCFfK,IAASC,OACP,kBAAC,IAAD,CAAeC,SAAS,cACtB,kBAAC,IAAD,CAAUP,MAAQA,GAChB,kBAAC,EAAD,QAGJQ,SAASC,eAAe,W","file":"static/js/main.e8da26ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","export const GET_NAME = 'GET_NAME';\r\nexport const GET_EMAIL = 'GET_EMAIL';\r\nexport const GET_SCORE = 'GET_SCORE';\r\nexport const GET_ASSERTION = 'GET_ASSERTION';\r\nexport const GET_RESET = 'GET_RESET';\r\n\r\nexport const getName = (name) => ({\r\n  type: GET_NAME,\r\n  payload: name,\r\n});\r\n\r\nexport const getEmail = (email) => ({\r\n  type: GET_EMAIL,\r\n  payload: email,\r\n});\r\n\r\nexport const getScore = (score) => ({\r\n  type: GET_SCORE,\r\n  payload: score,\r\n});\r\n\r\nexport const getAssertion = (anwser) => ({\r\n  type: GET_ASSERTION,\r\n  payload: anwser,\r\n});\r\n\r\nexport const getReset = (reset) => ({\r\n  type: GET_RESET,\r\n  payload: reset,\r\n});\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { getEmail, getName } from '../actions';\r\nimport logo from '../trivia.png';\r\n\r\nclass Login extends Component {\r\n  state = {\r\n    nome: '',\r\n    email: '',\r\n    btnDisabled: true,\r\n  }\r\n\r\n  onHandle = ({ target }) => {\r\n    const { value } = target;\r\n    const { name } = target;\r\n\r\n    this.setState({ [name]: value }, () => { this.activateButton(); });\r\n  }\r\n\r\n  activateButton = () => {\r\n    const { nome, email } = this.state;\r\n    if (nome.length > 1 && email.length > 1) {\r\n      this.setState({ btnDisabled: false });\r\n    } else {\r\n      this.setState({ btnDisabled: true });\r\n    }\r\n  }\r\n\r\n  submitForm = (e) => {\r\n    e.preventDefault();\r\n    this.funcFetch();\r\n  }\r\n\r\n  funcFetch = async () => {\r\n    const { nome, email } = this.state;\r\n    const urlToken = 'https://opentdb.com/api_token.php?command=request';\r\n    try {\r\n      const response = await fetch(urlToken);\r\n      const data = await response.json();\r\n      const { dispatch, history } = this.props;\r\n      dispatch(getName(nome));\r\n      dispatch(getEmail(email));\r\n      localStorage.setItem('token', data.token);\r\n      history.push('/game');\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { nome, email, btnDisabled } = this.state;\r\n    return (\r\n      <div className=\"login\">\r\n        <header className=\"login-header\">\r\n          <img src={ logo } className=\"login-logo\" alt=\"logo\" />\r\n          <p>YOUR TURN!</p>\r\n        </header>\r\n        <form onSubmit={ this.submitForm }>\r\n          <input\r\n            name=\"nome\"\r\n            value={ nome }\r\n            onChange={ this.onHandle }\r\n            data-testid=\"input-player-name\"\r\n            type=\"text\"\r\n            placeholder=\"Name\"\r\n          />\r\n          <br />\r\n          <input\r\n            name=\"email\"\r\n            value={ email }\r\n            onChange={ this.onHandle }\r\n            data-testid=\"input-gravatar-email\"\r\n            type=\"text\"\r\n            placeholder=\"E-mail\"\r\n          />\r\n          <br />\r\n          <br />\r\n          <button\r\n            className=\"button-login\"\r\n            type=\"submit\"\r\n            data-testid=\"btn-play\"\r\n            disabled={ btnDisabled }\r\n          >\r\n            Play\r\n          </button>\r\n        </form>\r\n        <br />\r\n        <Link to=\"/ranking\" data-testid=\"btn-settings\">Ranking</Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nLogin.propTypes = {\r\n  dispatch: PropTypes.func.isRequired,\r\n  history: PropTypes.shape({\r\n    push: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default connect()(Login);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Question extends Component {\r\n  render() {\r\n    const { category, correctAnswer, answers, question, answerF, answered } = this.props;\r\n    return (\r\n      <main className=\"question\">\r\n        <h1 data-testid=\"question-category\">\r\n          {category\r\n            .replace(/&#039;/g, '\\'')\r\n            .replace(/&quot;/g, '\"')\r\n            .replace(/&amp;/g, '&')\r\n            .replace(/&deg/g, '°')\r\n            .replace(/&rsquo;/g, '´')\r\n            .replace(/&uuml;/g, 'ü')\r\n            .replace(/&eacute;/g, 'é')}\r\n        </h1>\r\n        <h2 data-testid=\"question-text\">\r\n          {question\r\n            .replace(/&#039;/g, '\\'')\r\n            .replace(/&quot;/g, '\"')\r\n            .replace(/&amp/g, '&')\r\n            .replace(/&deg/g, '°')\r\n            .replace(/&rsquo;/g, '´')\r\n            .replace(/&uuml;/g, 'ü')\r\n            .replace(/&eacute;/g, 'é')}\r\n        </h2>\r\n        <div data-testid=\"answer-options\" className=\"question-options\">\r\n          {answers.map((answer, index) => (\r\n            answer !== correctAnswer ? (\r\n              <button\r\n                key={ answer }\r\n                type=\"button\"\r\n                data-testid={ `wrong-answer-${index}` }\r\n                onClick={ answerF }\r\n                className={ answered ? 'question-wrong' : undefined }\r\n                disabled={ answered }\r\n              >\r\n                {answer\r\n                  .replace(/&#039;/g, '\\'')\r\n                  .replace(/&quot;/g, '\"')\r\n                  .replace(/&amp/g, '&')\r\n                  .replace(/&deg/g, '°')\r\n                  .replace(/&rsquo;/g, '´')\r\n                  .replace(/&uuml;/g, 'ü')\r\n                  .replace(/&eacute;/g, 'é')}\r\n              </button>\r\n            ) : (\r\n              <button\r\n                key={ answer }\r\n                type=\"button\"\r\n                data-testid=\"correct-answer\"\r\n                onClick={ answerF }\r\n                className={ answered ? 'question-right' : undefined }\r\n                disabled={ answered }\r\n              >\r\n                {answer\r\n                  .replace(/&#039;/g, '\\'')\r\n                  .replace(/&quot;/g, '\"')\r\n                  .replace(/&amp/g, '&')\r\n                  .replace(/&deg/g, '°')\r\n                  .replace(/&rsquo;/g, '´')\r\n                  .replace(/&uuml;/g, 'ü')\r\n                  .replace(/&eacute;/g, 'é')}\r\n              </button>\r\n            )\r\n          )) }\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nQuestion.propTypes = {\r\n  category: PropTypes.string.isRequired,\r\n  correctAnswer: PropTypes.string.isRequired,\r\n  answers: PropTypes.instanceOf(Array).isRequired,\r\n  question: PropTypes.string.isRequired,\r\n  answerF: PropTypes.func.isRequired,\r\n  answered: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default Question;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport md5 from 'crypto-js/md5';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Header extends Component {\r\n  state = {\r\n    emailString: '',\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { email } = this.props;\r\n    const emailString = md5(email).toString();\r\n    this.setState({ emailString });\r\n  }\r\n\r\n  render() {\r\n    const { emailString } = this.state;\r\n    const { name, score } = this.props;\r\n    const gravatar = 'https://www.gravatar.com/avatar/';\r\n    return (\r\n      <header className=\"game-header\">\r\n        <img\r\n          src={ `${gravatar}${emailString}` }\r\n          alt=\"imagem jogador\"\r\n          data-testid=\"header-profile-picture\"\r\n        />\r\n        <span data-testid=\"header-player-name\">{name}</span>\r\n        <span>Score: </span>\r\n        <span data-testid=\"header-score\">{score}</span>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ player }) => ({\r\n  name: player.name,\r\n  // assertions: player.assertions,\r\n  score: player.score,\r\n  email: player.gravatarEmail,\r\n});\r\n\r\nHeader.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  email: PropTypes.string.isRequired,\r\n  score: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps)(Header);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport Question from '../components/Question';\r\nimport { getAssertion, getScore } from '../actions';\r\nimport Header from '../components/Header';\r\n\r\nclass Game extends Component {\r\n  state = {\r\n    questions: [],\r\n    category: '',\r\n    correctAnswer: '',\r\n    difficulty: '', // easy, medium or hard\r\n    answers: [],\r\n    question: '',\r\n    index: 0,\r\n    answered: false,\r\n    timer: 30,\r\n    next: false,\r\n    showTimer: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getQuestions();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const { timer } = this.state;\r\n    if (timer === 0) this.timesUp();\r\n  }\r\n\r\n  counter = () => {\r\n    const milliseconds = 1000;\r\n\r\n    this.timeLeft = setInterval(() => {\r\n      this.setState((prev) => ({ timer: prev.timer - 1 }));\r\n    }, milliseconds);\r\n  };\r\n\r\n  getQuestions = async () => {\r\n    const token = localStorage.getItem('token');\r\n    const numQuestions = 5;\r\n    const url = `https://opentdb.com/api.php?amount=${numQuestions}&token=${token}`;\r\n    const response = await fetch(url);\r\n    const questions = await response.json();\r\n    this.getTrivia(questions);\r\n  };\r\n\r\n  getTrivia = ({ results, response_code: response }) => {\r\n    const { history } = this.props;\r\n    const rng = 0.5;\r\n    const ERROR_CODE = 3;\r\n    if (response === ERROR_CODE) {\r\n      localStorage.setItem('token', '');\r\n      history.push('/');\r\n    } else {\r\n      this.setState({\r\n        questions: results,\r\n        category: results[0].category,\r\n        correctAnswer: results[0].correct_answer,\r\n        difficulty: results[0].difficulty,\r\n        answers: results[0].incorrect_answers\r\n          .concat(results[0].correct_answer)\r\n          .sort(() => Math.random() - rng),\r\n        question: results[0].question,\r\n        index: 0,\r\n        showTimer: true,\r\n      });\r\n      this.counter();\r\n    }\r\n  };\r\n\r\n  answer = ({ target }) => {\r\n    const correct = target.dataset.testid;\r\n    if (correct === 'correct-answer') this.setScore();\r\n\r\n    clearInterval(this.timeLeft);\r\n    this.setState({\r\n      timer: 30,\r\n      answered: true,\r\n      next: true,\r\n      showTimer: false,\r\n    });\r\n  };\r\n\r\n  timesUp = () => {\r\n    clearInterval(this.timeLeft);\r\n    this.setState({\r\n      timer: 30,\r\n      answered: true,\r\n      next: true,\r\n      showTimer: false,\r\n    });\r\n  };\r\n\r\n  nextQuestion = () => {\r\n    const { questions, index } = this.state;\r\n    const { history } = this.props;\r\n    const rng = 0.5;\r\n    const maxQuestions = 4;\r\n    const next = index + 1;\r\n    if (index === maxQuestions) history.push('/feedback');\r\n    else {\r\n      this.setState({\r\n        category: questions[next].category,\r\n        correctAnswer: questions[next].correct_answer,\r\n        answers: questions[next].incorrect_answers.concat(questions[next].correct_answer)\r\n          .sort(() => Math.random() - rng),\r\n        question: questions[next].question,\r\n        index: next,\r\n        answered: false,\r\n        next: false,\r\n        showTimer: true,\r\n      });\r\n      this.counter();\r\n    }\r\n  };\r\n\r\n  setScore = () => {\r\n    const { timer, difficulty } = this.state;\r\n    const { dispatch, score, assertions } = this.props;\r\n    const easy = 1;\r\n    const medium = 2;\r\n    const hard = 3;\r\n    const base = 10;\r\n    let diff = 0;\r\n    switch (difficulty) {\r\n    case 'easy':\r\n      diff = easy;\r\n      break;\r\n    case 'medium':\r\n      diff = medium;\r\n      break;\r\n    case 'hard':\r\n      diff = hard;\r\n      break;\r\n    default:\r\n      diff = 0;\r\n    }\r\n    const total = score + (base + timer * diff);\r\n    const assertion = assertions + 1;\r\n    dispatch(getScore(total));\r\n    dispatch(getAssertion(assertion));\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      category,\r\n      correctAnswer,\r\n      answers,\r\n      question,\r\n      answered,\r\n      next,\r\n      index,\r\n      timer,\r\n      showTimer } = this.state;\r\n\r\n    const maxQuestions = 4;\r\n    return (\r\n      <>\r\n        <Header />\r\n        <div className=\"container\">\r\n          <Question\r\n            category={ category }\r\n            correctAnswer={ correctAnswer }\r\n            answers={ answers }\r\n            question={ question }\r\n            nextQuestion={ this.nextQuestion }\r\n            answerF={ this.answer }\r\n            answered={ answered }\r\n          />\r\n          {\r\n            next && (\r\n              <button\r\n                className=\"button-login next\"\r\n                type=\"button\"\r\n                data-testid=\"btn-next\"\r\n                onClick={ this.nextQuestion }\r\n              >\r\n                {index === maxQuestions ? 'Feedback' : 'Next'}\r\n              </button>\r\n            )\r\n          }\r\n          {\r\n            showTimer && (\r\n              <div className=\"timer-container\">\r\n                <p className=\"timer\">Time remaining:</p>\r\n                <p className=\"timer\">{timer}</p>\r\n              </div>\r\n            )\r\n          }\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ player }) => ({\r\n  name: player.name,\r\n  assertions: player.assertions,\r\n  score: player.score,\r\n  email: player.gravatarEmail,\r\n});\r\n\r\nGame.propTypes = {\r\n  history: PropTypes.shape({\r\n    push: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  score: PropTypes.number.isRequired,\r\n  assertions: PropTypes.number.isRequired,\r\n  dispatch: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps)(Game);\r\n","import React, { Component } from 'react';\r\n\r\nclass Settings extends Component {\r\n  render() {\r\n    return (\r\n      <h1 data-testid=\"settings-title\">Settings</h1>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Settings;\r\n","import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Results extends Component {\r\n  message = () => {\r\n    const { assertions } = this.props;\r\n    const good = 3;\r\n    if (assertions < good) return 'Could be better...';\r\n    return 'Well Done!';\r\n  }\r\n\r\n  render() {\r\n    const { assertions, score, history } = this.props;\r\n    return (\r\n      <div className=\"results\">\r\n        <p data-testid=\"feedback-text\">{this.message()}</p>\r\n        <span>Score: </span>\r\n        <span data-testid=\"feedback-total-score\">{score}</span>\r\n        <br />\r\n        <span>Assertions: </span>\r\n        <span data-testid=\"feedback-total-question\">{assertions}</span>\r\n        <br />\r\n        <Link\r\n          className=\"button-feedback\"\r\n          to=\"/ranking\"\r\n          data-testid=\"btn-ranking\"\r\n        >\r\n          Ranking\r\n        </Link>\r\n        <br />\r\n        <button\r\n          className=\"button-login play-again\"\r\n          onClick={ () => history.push('/') }\r\n          type=\"button\"\r\n          data-testid=\"btn-play-again\"\r\n        >\r\n          Play Again\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ player }) => ({\r\n  assertions: player.assertions,\r\n  score: player.score,\r\n});\r\n\r\nResults.propTypes = {\r\n  assertions: PropTypes.number.isRequired,\r\n  score: PropTypes.number.isRequired,\r\n  history: PropTypes.shape({\r\n    push: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps)(Results);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { getReset } from '../actions';\r\nimport Header from '../components/Header';\r\nimport Results from '../components/Results';\r\n\r\nclass Feedback extends Component {\r\n  componentDidMount() {\r\n    if (!localStorage.getItem('ranking')) this.firstPlay();\r\n    else this.otherPlay();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { dispatch } = this.props;\r\n    dispatch(getReset());\r\n  }\r\n\r\n  firstPlay = () => {\r\n    const { name, score } = this.props;\r\n    const ranking = [{\r\n      name,\r\n      score,\r\n    }];\r\n    localStorage.setItem('ranking', JSON.stringify(ranking));\r\n  }\r\n\r\n  otherPlay = () => {\r\n    const { name, score } = this.props;\r\n    const players = JSON.parse(localStorage.getItem('ranking'));\r\n    const newPlayer = {\r\n      name,\r\n      score,\r\n    };\r\n    const newList = [...players, newPlayer];\r\n    localStorage.setItem('ranking', JSON.stringify(newList));\r\n  }\r\n\r\n  render() {\r\n    const { history } = this.props;\r\n    return (\r\n      <div data-testid=\"feedback-text\">\r\n        <Header />\r\n        <Results history={ history } />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ player }) => ({\r\n  name: player.name,\r\n  score: player.score,\r\n  // email: player.gravatarEmail,\r\n});\r\n\r\nFeedback.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  score: PropTypes.number.isRequired,\r\n  dispatch: PropTypes.func.isRequired,\r\n  history: PropTypes.shape({\r\n    push: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps)(Feedback);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Ranking extends Component {\r\n  state = {\r\n    ranking: [],\r\n    first: false,\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (localStorage.getItem('ranking')) {\r\n      const list = JSON.parse(localStorage.getItem('ranking'));\r\n      const ranking = list.sort((a, b) => b.score - a.score);\r\n      this.setState({\r\n        ranking,\r\n        first: false,\r\n      });\r\n    } else this.setState({ first: true });\r\n  }\r\n\r\n  clearRanking = () => {\r\n    localStorage.removeItem('ranking');\r\n    this.setState({ first: true });\r\n  }\r\n\r\n  render() {\r\n    const { ranking, first } = this.state;\r\n    const { history } = this.props;\r\n    // if (first) return <p>Primeira vez</p>;\r\n    return (\r\n      <div className=\"ranking\">\r\n        <p data-testid=\"ranking-title\">Ranking</p>\r\n        {\r\n          !first && (\r\n            <div className=\"player-container\">\r\n              {\r\n                ranking.map((player, index) => (\r\n                  <div className=\"player\" key={ index }>\r\n                    <span data-testid={ `player-name-${index}` }>{player.name}</span>\r\n                    <span data-testid={ `player-score-${index}` }>{player.score}</span>\r\n                  </div>\r\n                ))\r\n              }\r\n            </div>\r\n          )\r\n        }\r\n        <br />\r\n        <button\r\n          className=\"button-login play-again\"\r\n          onClick={ () => history.push('/') }\r\n          type=\"button\"\r\n          data-testid=\"btn-go-home\"\r\n        >\r\n          Play Again\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"button-login clear-ranking\"\r\n          onClick={ this.clearRanking }\r\n        >\r\n          Clear ranking\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRanking.propTypes = {\r\n  history: PropTypes.shape({\r\n    push: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default Ranking;\r\n","import React from 'react';\r\n\r\nfunction MainHeader() {\r\n  const link = <a href=\"https://lucasbitencourt.com.br/\">Lucas Bitencourt</a>;\r\n  return (\r\n    <div className=\"main-header\">\r\n      <p>\r\n        Projeto feito por\r\n        {' '}\r\n        {link}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainHeader;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Login from './pages/Login';\r\nimport Game from './pages/Game';\r\nimport Settings from './pages/Settings';\r\nimport Feedback from './pages/Feedback';\r\nimport Ranking from './pages/Ranking';\r\nimport MainHeader from './components/MainHeader';\r\n\r\nexport default function App() {\r\n  return (\r\n    <>\r\n      <MainHeader />\r\n      <Switch>\r\n        <Route path=\"/\" exact component={ Login } />\r\n        <Route path=\"/game\" exact component={ Game } />\r\n        <Route path=\"/settings\" exact component={ Settings } />\r\n        <Route path=\"/feedback\" exact component={ Feedback } />\r\n        <Route path=\"/ranking\" exact component={ Ranking } />\r\n      </Switch>\r\n    </>\r\n  );\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { GET_ASSERTION, GET_EMAIL, GET_NAME, GET_RESET, GET_SCORE } from '../actions';\r\n\r\nconst INITIAL_STATE = {\r\n  name: 'Anonimo',\r\n  assertions: 0,\r\n  score: 0,\r\n  gravatarEmail: 'anonimo@email.com',\r\n};\r\n\r\nconst player = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n  case GET_NAME:\r\n    return { ...state, name: action.payload };\r\n\r\n  case GET_EMAIL:\r\n    return { ...state, gravatarEmail: action.payload };\r\n\r\n  case GET_SCORE:\r\n    return { ...state, score: action.payload };\r\n\r\n  case GET_ASSERTION:\r\n    return { ...state, assertions: action.payload };\r\n\r\n  case GET_RESET:\r\n    return INITIAL_STATE;\r\n\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nconst rootReducer = combineReducers({ player });\r\n\r\nexport default rootReducer;\r\n","import { legacy_createStore as createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport rootReducer from '../reducers';\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools());\r\nif (window.Cypress) {\r\n  window.store = store;\r\n}\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename=\"/tp-trivia\">\r\n    <Provider store={ store }>\r\n      <App />\r\n    </Provider>\r\n  </BrowserRouter>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}